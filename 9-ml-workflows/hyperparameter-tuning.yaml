apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: hyperparameter-tuning-
spec:
  entrypoint: hyperparameter-tuning
  arguments:
    parameters:
    - name: dataset-path
      value: "/data/mnist"
    - name: num-trials
      value: "3"

  templates:
  - name: hyperparameter-tuning
    steps:
    - - name: preprocess
        template: preprocess-data
        arguments:
          parameters:
          - name: dataset-path
            value: "{{workflow.parameters.dataset-path}}"
    
    - - name: parallel-training
        template: parallel-training
        arguments:
          parameters:
          - name: num-trials
            value: "{{workflow.parameters.num-trials}}"
        withSequence:
          start: "1"
          end: "{{workflow.parameters.num-trials}}"
    
    - - name: evaluate
        template: evaluate-models
        arguments:
          parameters:
          - name: num-trials
            value: "{{workflow.parameters.num-trials}}"

  - name: preprocess-data
    inputs:
      parameters:
      - name: dataset-path
    script:
      image: python:3.9
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "2Gi"
          cpu: "2"
      command: [python]
      source: |
        import os
        import sys
        from datetime import datetime
        
        def log(message):
            print(message, flush=True)
            sys.stdout.flush()
        
        try:
            dataset_path = "{{inputs.parameters.dataset-path}}"
            log(f"[{datetime.now()}] Preprocessing data from {dataset_path}")
            
            # 模拟数据预处理
            os.makedirs("/tmp/argo/outputs", exist_ok=True)
            with open("/tmp/argo/outputs/status.txt", "w") as f:
                f.write("preprocessing_completed")
            
            log(f"[{datetime.now()}] Data preprocessing completed")
        except Exception as e:
            log(f"[{datetime.now()}] Error in preprocessing: {str(e)}")
            raise
    outputs:
      parameters:
      - name: status
        valueFrom:
          path: /tmp/argo/outputs/status.txt

  - name: parallel-training
    inputs:
      parameters:
      - name: num-trials
    script:
      image: pytorch/pytorch:latest
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          nvidia.com/gpu: 1
          memory: "8Gi"
          cpu: "4"
      command: [python]
      source: |
        import torch
        import random
        import os
        import sys
        import time
        from datetime import datetime
        
        def log(message):
            print(message, flush=True)
            sys.stdout.flush()
        
        try:
            trial_num = int("{{item}}")
            log(f"[{datetime.now()}] Starting trial {trial_num}")
            
            # 随机生成超参数
            learning_rate = random.uniform(0.0001, 0.01)
            batch_size = random.choice([16, 32, 64, 128])
            
            log(f"[{datetime.now()}] Trial {trial_num} parameters:")
            log(f"  - Learning rate: {learning_rate}")
            log(f"  - Batch size: {batch_size}")
            
            # 模拟训练过程
            for epoch in range(5):
                time.sleep(2)  # 模拟训练时间
                accuracy = random.uniform(0.8, 0.95)  # 模拟准确率
                log(f"[{datetime.now()}] Trial {trial_num}, Epoch {epoch + 1}/5, Accuracy: {accuracy:.4f}")
            
            # 保存结果
            os.makedirs("/tmp/argo/outputs", exist_ok=True)
            with open(f"/tmp/argo/outputs/trial_{trial_num}_results.txt", "w") as f:
                f.write(f"learning_rate={learning_rate}\n")
                f.write(f"batch_size={batch_size}\n")
                f.write(f"final_accuracy={accuracy:.4f}\n")
            
            log(f"[{datetime.now()}] Trial {trial_num} completed")
        except Exception as e:
            log(f"[{datetime.now()}] Error in trial {trial_num}: {str(e)}")
            raise
    outputs:
      artifacts:
      - name: results
        path: /tmp/argo/outputs/trial_{{item}}_results.txt

  - name: evaluate-models
    inputs:
      parameters:
      - name: num-trials
    script:
      image: python:3.9
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import os
        import sys
        from datetime import datetime
        
        def log(message):
            print(message, flush=True)
            sys.stdout.flush()
        
        try:
            num_trials = int("{{inputs.parameters.num-trials}}")
            log(f"[{datetime.now()}] Evaluating {num_trials} trials")
            
            # 读取所有试验结果
            results = []
            for i in range(1, num_trials + 1):
                with open(f"/tmp/argo/outputs/trial_{i}_results.txt", "r") as f:
                    results.append(f.read())
            
            # 分析结果
            log(f"[{datetime.now()}] All trials completed. Results:")
            for i, result in enumerate(results, 1):
                log(f"\nTrial {i}:\n{result}")
            
            # 写入评估结果
            os.makedirs("/tmp/argo/outputs", exist_ok=True)
            with open("/tmp/argo/outputs/evaluation.txt", "w") as f:
                f.write("Evaluation completed successfully")
            
            log(f"[{datetime.now()}] Evaluation completed")
        except Exception as e:
            log(f"[{datetime.now()}] Error in evaluation: {str(e)}")
            raise
    outputs:
      parameters:
      - name: status
        valueFrom:
          path: /tmp/argo/outputs/evaluation.txt 